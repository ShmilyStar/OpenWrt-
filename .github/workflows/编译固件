#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: 编译固件

on:
  repository_dispatch:
  workflow_dispatch:
 
env:
  FEEDS_CONF: feeds.conf.default
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
   
jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查
      uses: actions/checkout@main

    - name: 读取自定义设置
      id: read_ini
      run: |
        while IFS='=' read -r key value; do
          if [[ $key != \#* && $key ]]; then  # 跳过注释行和空行
            echo "$key=$value" >> $GITHUB_ENV
          fi
        done < build/setting.ini

    - name: 设置环境变量
      run: |
        echo "REPO_URL: $REPO_URL"
        echo "REPO_BRANCH: $REPO_BRANCH"
        echo "DEVICE_NAME: $DEVICE_NAME"
        echo "CONFIG_FILE: $CONFIG_FILE"
        echo "DIY_P1_SH: $DIY_P1_SH"
        echo "DIY_P2_SH: $DIY_P2_SH"

    - name: 安装编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 下载源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 加载软件源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新软件源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 改变golange版本和tailscale版本
      run: cd openwrt && git clone -b master --single-branch https://github.com/immortalwrt/packages.git packages_master && rm -rf ./feeds/packages/lang/golang && rm -rf ./feeds/packages/net/tailscale && mv ./packages_master/lang/golang ./feeds/packages/lang && mv ./packages_master/net/tailscale ./feeds/packages/net && rm -rf ./packages_master

    - name: 安装软件源
      run: cd openwrt && ./scripts/feeds install -a

    - name: 展示golange和tailscale版本
      run: cd openwrt && cat ./feeds/packages/lang/golang/golang/Makefile | grep GO_VERSION && cat feeds/packages/net/tailscale/Makefile | grep PKG_VERSION
      
    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        sudo -E apt-get -qq install neofetch
        echo -e "*******************neofetch*******************"
        neofetch
        echo -e "*******************uname -a*******************"
        uname -a
        echo -e "*******************lsblk*******************"
        lsblk
        echo -e "*******************df -Th*******************"
        df -Th
        echo -e "*******************fdisk -l*******************"
        sudo fdisk -l
        echo -e "*******************make*******************"
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查可用容量
      if: (!cancelled())
      run: df -hT

    - name: 上传bin文件
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 组织文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=immortalwrt-mt798x${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "immortalwrt-mt798x${{ env.DEVICE_NAME }}, lan: 192.168.8.1, openclash(dev), passwall(ss-rust, trojan-plus), adguardhome, openappfilter, samba, msd-lite, rndis, usb2, usb3, w/o memory shrink, zerotier, luci-app-mtwifi-cfg, ttyd, diskman, mt_wifi-v7.6.6.1, mt7981-fw-20230411, 9921-support-SX-7981R128-for-mtk-sdk-k5.4.284.patch" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件至release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除旧Actions
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 3
        keep_minimum_runs: 3

    - name: 移除旧Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 9
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
